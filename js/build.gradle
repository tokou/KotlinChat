buildscript {

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$node_plugin_version"
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.moowork.node'

dependencies {
    expectedBy project(':common')

    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"

    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlin_serialization_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        sourceMapEmbedSources = 'always'
        moduleKind = 'commonjs'
    }
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir
    into "${buildDir}/node_modules"

    afterEvaluate {
        configurations.testCompile.each {
            from zipTree(it.absolutePath).matching {
                include '*.js'
                include '*.js.map'
            }
        }
    }
}

node {
    download = true
    nodeModulesDir = file("${project.buildDir}/node_modules")
}

task installDependencies(type: NpmTask) {
    args = ['install', 'mocha', 'source-map-support', '--save-dev']
}

task prepareMocha(dependsOn: [compileTestKotlin2Js, populateNodeModules, installDependencies])

task runMocha(type: NodeTask, dependsOn: prepareMocha) {
    script = file('build/node_modules/mocha/bin/mocha')
    args = [compileTestKotlin2Js.outputFile, '--require=source-map-support/register']
}

test.dependsOn runMocha
